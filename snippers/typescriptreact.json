{

	"创建DvaModel": {
		"prefix": "dva-model",
		"body": [
			"import { PageResultOf${TM_FILENAME_BASE/([a-z])/${1:/upcase}/}Dto, ${TM_FILENAME_BASE/([a-z])/${1:/upcase}/}Client } from '@/utils/HttpClient';",
			"import { Effect } from 'dva';",
			"import { Reducer } from 'redux';",
			"",
			"const http = new ${TM_FILENAME_BASE/([a-z])/${1:/upcase}/}Client();",
			"",
			"// 定义ProductProviderStateModel",
			"export interface I${TM_FILENAME_BASE/([a-z])/${1:/upcase}/}ModelState {",
			"  data: PageResultOf${TM_FILENAME_BASE/([a-z])/${1:/upcase}/}Dto;",
			"}",
			"",
			"// 定义ProductProviderModel",
			"export interface I${TM_FILENAME_BASE/([a-z])/${1:/upcase}/}Model {",
			"  namespace: '$TM_FILENAME_BASE';",
			"  state: I${TM_FILENAME_BASE/([a-z])/${1:/upcase}/}ModelState;",
			"  effects: {",
			"    fetch: Effect;",
			"    get: Effect;",
			"    add: Effect;",
			"    remove: Effect;",
			"    update: Effect;",
			"  };",
			"  reducers: {",
			"    save: Reducer<any>;",
			"  };",
			"}",
			"const ${TM_FILENAME_BASE/([a-z])/${1:/upcase}/}Model: I${TM_FILENAME_BASE/([a-z])/${1:/upcase}/}Model = {",
			"  namespace: '$TM_FILENAME_BASE',",
			"  state: {",
			"    data: {",
			"      list: [],",
			"      pagination: {",
			"        total: 0,",
			"        pageSize: 10,",
			"        current: 1,",
			"      },",
			"    },",
			"  },",
			"  effects: {",
			"    *fetch({ payload }, { put }) {",
			"      // 请求前构建后台查询",
			"      const { name, pageSize, current, sorting } = payload;",
			"      const response = yield http.getList(name, sorting, pageSize, current);",
			"      yield put({",
			"        type: 'save',",
			"        payload: response,",
			"      });",
			"    },",
			"    *get({ payload }, {}) {",
			"      const response = yield http.get(payload.id);",
			"      return response;",
			"    },",
			"    *add({ payload }, { put, select }) {",
			"      const response = yield http.create(payload.model);",
			"      const stateTemp: I${TM_FILENAME_BASE/([a-z])/${1:/upcase}/}ModelState = yield select(state => state.$TM_FILENAME_BASE);",
			"      const data = {",
			"        list: [response, ...stateTemp.data.list.splice(0, 9)],",
			"        pagination: {",
			"          ...stateTemp.data.pagination,",
			"          total: stateTemp.data.pagination.total + 1,",
			"        },",
			"      };",
			"      yield put({",
			"        type: 'save',",
			"        payload: data,",
			"      });",
			"    },",
			"    *update({ payload }, { put, call, select }) {",
			"      const { dto } = payload;",
			"      const response = yield http.update(dto);",
			"      const stateTemp: I${TM_FILENAME_BASE/([a-z])/${1:/upcase}/}ModelState = yield select(state => state.$TM_FILENAME_BASE);",
			"      const data = {",
			"        list: stateTemp.data.list.map(item => {",
			"          if (item.id === dto.id) {",
			"            return response;",
			"          } else {",
			"            return item;",
			"          }",
			"        }),",
			"        pagination: stateTemp.data.pagination,",
			"      };",
			"      yield put({",
			"        type: 'save',",
			"        payload: data,",
			"      });",
			"    },",
			"    *remove({ payload }, { put, call, select }) {",
			"      const { id } = payload;",
			"      yield http.delete(id);",
			"      const stateTemp: I${TM_FILENAME_BASE/([a-z])/${1:/upcase}/}ModelState = yield select(state => state.$TM_FILENAME_BASE);",
			"      const data = {",
			"        list: stateTemp.data.list.filter(b => b.id !== id),",
			"        pagination: {",
			"          ...stateTemp.data.pagination,",
			"          total: stateTemp.data.pagination.total - 1,",
			"        },",
			"      };",
			"      yield put({",
			"        type: 'save',",
			"        payload: data,",
			"      });",
			"    },",
			"  },",
			"  reducers: {",
			"    save(state, action) {",
			"      return {",
			"        ...state,",
			"        data: action.payload,",
			"      };",
			"    },",
			"  },",
			"};",
			"",
			"export default ${TM_FILENAME_BASE/([a-z])/${1:/upcase}/}Model;",
			""
		],
		"description": "创建DvaModel"
	},
	"创建标准列表": {
		"prefix": "dva-list",
		"body": [
			"import PageHeaderWrapper from '@/components/PageHeaderWrapper';",
			"import StandardTable from '@/components/StandardTable';",
			"import {",
			"  Badge,",
			"  Button,",
			"  Card,",
			"  Col,",
			"  Divider,",
			"  Input,",
			"  message,",
			"  Popconfirm,",
			"  Row,",
			"  Select,",
			"  Tag,",
			"  TreeSelect,",
			"} from 'antd';",
			"import Form, { FormComponentProps } from 'antd/lib/form';",
			"import FormItem from 'antd/lib/form/FormItem';",
			"import { PaginationConfig, SorterResult } from 'antd/lib/table';",
			"import { connect } from 'dva';",
			"import React, { Component, Fragment } from 'react';",
			"import { EnumToTableFilter, EnumTypeStatusNames } from '@/utils/Helper';",
			"import { I${TM_FILENAME_BASE/([A-Z])/${1:/upcase}/}ModelState } from './models/${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/}';",
			"import Create${TM_FILENAME_BASE}Modal from './components/Create${TM_FILENAME_BASE}Modal';",
			"import Update${TM_FILENAME_BASE}Modal from './components/Update${TM_FILENAME_BASE}Modal';",
			"import styles from './${TM_FILENAME_BASE}.less';",
			"",
			"interface IIndexProps extends FormComponentProps {",
			"  ${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/}: I${TM_FILENAME_BASE}ModelState;",
			"  dispatch: (args: any) => Promise<any>;",
			"  loading: boolean;",
			"}",
			"",
			"interface IIndexState {",
			"  createModelVisiable: boolean;",
			"  updateModelVisiable: boolean;",
			"  selectedRows: any[]; // 已经选中的行",
			"  searchForm: object; // 查询对象的值",
			"  updateModel: object; // 页面要更新的对象",
			"}",
			"@connect(({ ${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/}, loading }) => ({",
			"  ${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/},",
			"  loading: loading.models.${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/}",
			"}))",
			"class Index extends Component<IIndexProps, IIndexState> {",
			"  /* 创建 table columns 的列定义*/",
			"  public columns = [",
			"    {",
			"      title: '商品名称',",
			"      dataIndex: 'name',",
			"    },",
			"    {",
			"      title: '操作',",
			"      render: (text, record) => (",
			"        <Fragment>",
			"          <a onClick={() => this.handleUpdateModalVisible(true, record.id)}>编辑</a>",
			"          <Divider type=\"vertical\" />",
			"          <Popconfirm title=\"是否要删除此行？\" onConfirm={() => this.handleDelete(record.id)}>",
			"            <a>删除</a>",
			"          </Popconfirm>",
			"        </Fragment>",
			"      ),",
			"    },",
			"  ];",
			"  constructor(props) {",
			"    super(props);",
			"    this.state = {",
			"      createModelVisiable: false,",
			"      updateModelVisiable: false,",
			"      selectedRows: [],",
			"      updateModel: {},",
			"      searchForm: {},",
			"    };",
			"  }",
			"",
			"  public componentDidMount() {",
			"    const { dispatch } = this.props;",
			"    dispatch({",
			"      type: '/fetch',",
			"      payload: {},",
			"    });",
			"  }",
			"",
			"  public handleSearch = e => {",
			"    e.preventDefault();",
			"    const { dispatch, form } = this.props;",
			"    form.validateFields((err, fieldsValues) => {",
			"      if (err) {",
			"        return;",
			"      }",
			"      const values = {",
			"        ...fieldsValues,",
			"      };",
			"      this.setState({",
			"        searchForm: values,",
			"      });",
			"      dispatch({",
			"        type: '${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/}/fetch',",
			"        payload: values,",
			"      });",
			"    });",
			"  };",
			"",
			"  public handleFormReset = () => {",
			"    const { form, dispatch } = this.props;",
			"    form.resetFields();",
			"    this.setState({",
			"      searchForm: {},",
			"    });",
			"    dispatch({",
			"      type: '${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/}/fetch',",
			"      payload: {},",
			"    });",
			"  };",
			"  public handleCreate = fields => {",
			"    const { dispatch } = this.props;",
			"    dispatch({",
			"      type: '${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/}/add',",
			"      payload: {",
			"        model: fields,",
			"      },",
			"    }).then(() => {",
			"      message.success('添加成功');",
			"      this.handleCreateModalVisible();",
			"    });",
			"  };",
			"",
			"  public handleCreateModalVisible: (flag?: boolean) => void = flag => {",
			"    this.setState({",
			"      createModelVisiable: !!flag,",
			"    });",
			"  };",
			"",
			"  public handleUpdate = fields => {",
			"    const { dispatch } = this.props;",
			"    dispatch({",
			"      type: '${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/}/update',",
			"      payload: {      ",
			"        dto: {",
			"          ...fields,",
			"        },",
			"      },",
			"    }).then(() => {",
			"      message.success('更新成功');",
			"      this.handleUpdateModalVisible();",
			"    });",
			"  };",
			"",
			"  public handleUpdateModalVisible: (flag?: boolean, id?: any) => void = (flag, id) => {",
			"    const { dispatch } = this.props;",
			"    if (id) {",
			"      dispatch({",
			"        type: '${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/}/get',",
			"        payload: {",
			"          id,",
			"        },",
			"      }).then(res => {",
			"        this.setState({",
			"          updateModelVisiable: !!flag,",
			"          updateModel: res || {},",
			"        });",
			"      });",
			"    } else {",
			"      this.setState({",
			"        updateModelVisiable: !!flag,",
			"        updateModel: {},",
			"      });",
			"    }",
			"  };",
			"",
			"  public handleDelete = id => {",
			"    const { dispatch } = this.props;",
			"    if (!id) {",
			"      return;",
			"    }",
			"    dispatch({",
			"      type: '${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/}/remove',",
			"      payload: {",
			"        id,",
			"      },",
			"    }).then(() => {",
			"      message.info('删除成功');",
			"    });",
			"  };",
			"",
			"  public handleSelectRows = rows => {",
			"    this.setState({",
			"      selectedRows: rows,",
			"    });",
			"  };",
			"",
			"  public handleStandardTableChange: (",
			"    pagination: PaginationConfig,",
			"    filters: Record<any, any>,",
			"    sorter: SorterResult<any>",
			"  ) => void = (pagination, filtersArg, sorter) => {",
			"    const { dispatch } = this.props;",
			"    const { searchForm } = this.state;",
			"    const params = {",
			"      current: pagination.current,",
			"      pageSize: pagination.pageSize,",
			"      sorting: '',",
			"      ...filtersArg,",
			"      ...searchForm,",
			"    };",
			"    if (sorter.field) {",
			"      const serverSort = sorter.order === 'ascend' ? 'Asc' : 'Desc';",
			"      params.sorting = `${sorter.field} \\${serverSort}`;",
			"    }",
			"    dispatch({",
			"      type: '${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/}/fetch',",
			"      payload: params,",
			"    });",
			"  };",
			"",
			"  //#endregion",
			"  public renderForm() {",
			"    const { getFieldDecorator } = this.props.form;",
			"    const { data } = this.props.${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/};",
			"    return (",
			"      <Form onSubmit={this.handleSearch} layout=\"inline\">",
			"        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>",
			"          <Col md={6} sm={24}>",
			"            <FormItem label=\"商品名称\">",
			"              {getFieldDecorator('name')(<Input placeholder=\"请输入商品名称进行查询\" />)}",
			"            </FormItem>",
			"          </Col>",
			"          <Col md={4} sm={24}>",
			"            <span>",
			"              <Button type=\"primary\" htmlType=\"submit\">",
			"                查询",
			"              </Button>",
			"              <Button style={{ marginLeft: 8 }} onClick={this.handleFormReset}>",
			"                重置",
			"              </Button>",
			"            </span>",
			"          </Col>",
			"        </Row>",
			"      </Form>",
			"    );",
			"  }",
			"",
			"  public render() {",
			"    const {",
			"     ${TM_FILENAME_BASE/([A-Z])/${1:/downcase}/}: { data },    ",
			"      loading,",
			"    } = this.props;",
			"    const { selectedRows, createModelVisiable, updateModelVisiable, updateModel } = this.state;",
			"",
			"    // 新增操作",
			"    const createMethods = {",
			"      handleAdd: this.handleCreate,",
			"      handleModalVisible: this.handleCreateModalVisible,",
			"    };",
			"",
			"    // 更新操作",
			"    const updateMethods = {",
			"      handleUpdate: this.handleUpdate,",
			"      handleUpdateModalVisible: this.handleUpdateModalVisible,",
			"    };",
			"",
			"    return (",
			"      <PageHeaderWrapper type=\"success\">",
			"       <Card bordered={false}>",
			"          <div className={styles.tableList}>",
			"            <div className={styles.tableListForm}>{this.renderForm()}</div>",
			"            <div className={styles.tableListOperator}>",
			"              <Button icon=\"plus\" type=\"primary\" onClick={() => this.handleCreateModalVisible(true)}>",
			"                新建",
			"              </Button>            ",
			"            </div>",
			"            <StandardTable",
			"              selectedRows={selectedRows}",
			"              loading={loading}",
			"              data={data}",
			"              columns={this.columns}",
			"              onSelectRow={this.handleSelectRows}",
			"              onChange={this.handleStandardTableChange}",
			"            />",
			"          </div>",
			"        </Card>",
			"        <Create${TM_FILENAME_BASE}Modal {...createMethods } modalVisible={createModelVisiable} />",
			"        {updateModel && Object.keys(updateModel ).length ? (",
			"          <Update${TM_FILENAME_BASE}Modal",
			"            {...updateMethods}",
			"            updateModalVisible={updateModelVisiable}",
			"            values={updateModel }",
			"          />",
			"        ) : null}",
			"      </PageHeaderWrapper>",
			"    );",
			"  }",
			"}",
			"export default Form.create()(Index);",
			"",
			""
		],
		"description": "创建标准列表"
	},
	"创建模块对话框": {
		"prefix": "dva-create-modal",
		"body": [
			"import React, { PureComponent } from 'react';",
			"import { Input, Modal } from 'antd';",
			"import Form, { FormComponentProps } from 'antd/lib/form';",
			"import FormItem from 'antd/lib/form/FormItem';",
			"",
			"interface I${TM_FILENAME_BASE}Props extends FormComponentProps {",
			"  modalVisible: boolean;",
			"  handleAdd: (fields: any) => void;",
			"  handleModalVisible: (flag?: boolean) => void;",
			"}",
			"",
			"class ${TM_FILENAME_BASE}Form extends PureComponent<I${TM_FILENAME_BASE}Props> {",
			"  public formLayout = {",
			"    labelCol: {",
			"      xs: { span: 24 },",
			"      sm: { span: 6 },",
			"    },",
			"    wrapperCol: {",
			"      xs: { span: 24 },",
			"      sm: { span: 16 },",
			"    },",
			"  };",
			"  public handelOk = () => {",
			"    const { form, handleAdd } = this.props;",
			"    form.validateFields((err, fieldsValue) => {",
			"      if (err) {",
			"        return;",
			"      }",
			"      form.resetFields();",
			"      handleAdd(fieldsValue);",
			"    });",
			"  };",
			"  public render() {",
			"    const { modalVisible, handleModalVisible, form } = this.props;",
			"    return (",
			"      <Modal",
			"        width={640}",
			"        destroyOnClose={true}",
			"        title=\"新增数据\"",
			"        visible={modalVisible}",
			"        onOk={this.handelOk}",
			"        onCancel={() => handleModalVisible()}",
			"      >",
			"        <Form>",
			"          <FormItem {...this.formLayout} label=\"书籍名称\">",
			"            {form.getFieldDecorator('name', {",
			"              rules: [{ required: true, message: '请输入书籍名称！' }],",
			"            })(<Input placeholder=\"请输入书籍名称\" />)}",
			"          </FormItem>",
			"        </Form>",
			"      </Modal>",
			"    );",
			"  }",
			"}",
			"",
			"export default Form.create<I${TM_FILENAME_BASE}Props>()(${TM_FILENAME_BASE}Form);",
			""
		],
		"description": "创建模块对话框"
	},
	"创建更新对话框": {
		"prefix": "dva-update-modal",
		"body": [
			"import { Button, Col, Divider, Input, Menu, message, Modal, Popconfirm, Row } from 'antd';",
			"import Form, { FormComponentProps } from 'antd/lib/form';",
			"import FormItem from 'antd/lib/form/FormItem';",
			"import React, { PureComponent } from 'react';",
			"",
			"import { ${1}} from '@/utils/HttpClient';",
			"",
			"interface I${TM_FILENAME_BASE}Props extends FormComponentProps {",
			"  handleUpdate: (e?: any) => void;",
			"  handleUpdateModalVisible: (flag?: boolean, record?: any) => void;",
			"  updateModalVisible: boolean;",
			"  values: ${1};",
			"}",
			"interface I${TM_FILENAME_BASE}State {",
			"  updateModel: ${1};",
			"}",
			"",
			"class ${TM_FILENAME_BASE}Class extends PureComponent<I${TM_FILENAME_BASE}Props, I${TM_FILENAME_BASE}State> {",
			"  // 页面布局",
			"  public formLayout = {",
			"    labelCol: {",
			"      xs: { span: 24 },",
			"      sm: { span: 6 },",
			"    },",
			"    wrapperCol: {",
			"      xs: { span: 24 },",
			"      sm: { span: 16 },",
			"    },",
			"  };",
			"  constructor(props) {",
			"    super(props);",
			"    this.state = {",
			"      updateModel: props.values,",
			"    };",
			"  }",
			"",
			"  public handleOk = () => {",
			"    const { form, handleUpdate } = this.props;",
			"    const { updateModel: oldValue } = this.state;",
			"    form.validateFields((err, fieldsValue) => {",
			"      if (err) {",
			"        return;",
			"      }",
			"      const formVals = { ...oldValue, ...fieldsValue };",
			"      handleUpdate(formVals);",
			"    });",
			"  };",
			"",
			"  public render() {",
			"    const { form, updateModalVisible, handleUpdateModalVisible } = this.props;",
			"    const { updateModel } = this.state;",
			"    return (",
			"      <Modal",
			"        width={640}",
			"        title=\"更新书籍\"",
			"        visible={updateModalVisible}",
			"        onCancel={() => handleUpdateModalVisible(false)}",
			"        onOk={this.handleOk}",
			"      >",
			"        <Form>",
			"          <FormItem {...this.formLayout} label=\"书籍名称\">",
			"            {form.getFieldDecorator('name', {",
			"              rules: [{ required: true, message: '请输入书籍名称！' }],",
			"              initialValue: updateModel.name,",
			"            })(<Input placeholder=\"请输入书籍名称\" />)}",
			"          </FormItem>",
			"        </Form>",
			"      </Modal>",
			"    );",
			"  }",
			"}",
			"",
			"export default Form.create<I${TM_FILENAME_BASE}Props>()(${TM_FILENAME_BASE}Class);",
			""
		],
		"description": "创建更新对话框"
	}

}